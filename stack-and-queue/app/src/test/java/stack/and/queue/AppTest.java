/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test void queueAndStackTest(){
//        Can successfully push onto a stack
        Stack<Integer> testStack = new Stack<>();
        testStack.push(5);
        assertEquals(5,testStack.top.value);


//        Can successfully push multiple values onto a stack
        testStack.push(7);
        testStack.push(8);
        assertEquals(8, testStack.top.value);


//        Can successfully pop off the stack
        assertEquals(8,testStack.pop());



//        Can successfully empty a stack after multiple pops
        testStack.pop();
        testStack.pop();
        assertNull(testStack.top);


//        Can successfully peek the next item on the stack
        testStack.push(4);
        assertEquals(4,testStack.peek());


//        Can successfully instantiate an empty stack
        Stack<Integer> emptyStack = new Stack<>();
        assertNull(emptyStack.top);


//        Calling pop or peek on empty stack raises exception
        emptyStack.peek();


//        Can successfully enqueue into a queue
        Queue<Integer> testQue = new Queue<>();
        testQue.enqueue(5);
        assertEquals(5, testQue.front.value);


//        Can successfully enqueue multiple values into a queue
        testQue.enqueue(6);
        testQue.enqueue(7);
        assertEquals(7, testQue.rear.value);


//        Can successfully dequeue out of a queue the expected value
        assertEquals(5  ,testQue.dequeue());


//        Can successfully peek into a queue, seeing the expected value
        assertEquals(6, testQue.peek());


//        Can successfully empty a queue after multiple dequeues
        testQue.dequeue();
        testQue.dequeue();
        assertNull(testQue.front);


//        Can successfully instantiate an empty queue
        Queue<Integer> emptyQue = new Queue<>();
        assertNull(emptyQue.front);

//        Calling dequeue or peek on empty queue raises exception
        emptyQue.dequeue();





    }



    @Test void stackQueuePsudo(){

        // testing that its enqueue properly
        PseudoQueue<Integer> test = new PseudoQueue<>();
        test.enqueue(5);
        assertEquals(5,test.instance1.peek());


        //testing that it can enqueue multiple values
        test.enqueue(7);
        test.enqueue(8);
        assertEquals("{5} => {7} => {8} => Null",test.instance1.toString());

        // testing that it dequeue properly
        assertEquals(5,test.dequeue());

        //testing that dequeueing from an empty queue should return null
        PseudoQueue<Integer> test1 = new PseudoQueue<>();
        assertNull(test1.dequeue());
    }
}


