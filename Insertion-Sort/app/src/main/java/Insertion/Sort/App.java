/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Insertion.Sort;

import java.util.ArrayList;
import java.util.Arrays;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {

        int[] testing = {8,4,23,42,16,15};
//        System.out.println(Arrays.toString(mergeSort(testing)));

   //        System.out.println(Arrays.toString(insertionSort(testing)));

        System.out.println(Arrays.toString(quickSort(testing, 0, testing.length-1)));
}

    public static int[] insertionSort(int[] list){
        for (int i = 1; i < list.length; i++) {
            int j = i-1;
            int temp = list[i];

            while (j>=0 && temp<list[j]){
                list[j+1] = list[j];
                j--;
            }
            list[j+1] = temp;
        }
        return list;
    }


    public static int[] mergeSort(int[] arr){
        int n =arr.length;
        int[] sorted = new int[arr.length];
        if(n>1){
            int mid = n/2;
            int[] left = Arrays.copyOfRange(arr,0,mid);
            int[] right = Arrays.copyOfRange(arr,mid,arr.length);
            mergeSort(left);
            mergeSort(right);
            sorted = merge(left, right, arr);
        }

        return sorted;
    }

    public static int[] merge(int[] left,int[] right,int[] arr){
        int i =0;
        int j =0;
        int k =0;

        while (i<left.length && j< right.length){
            if (left[i] <= right[j]){
                arr[k] = left[i];
                i=i+1;
            }
            else {
                arr[k] = right[j];
                j=j+1;
            }
            k=k+1;
        }

        if(i == left.length){
            while (j < right.length){
                arr[k] = right[j];
                k=k+1;
                j=j+1;
            }
        }
        else {
            while (i < left.length){
                arr[k] = left[i];
                k=k+1;
                i=i+1;
            }
        }
        return arr;
    }







    public static int[] quickSort(int[] arr, int left, int right) {
        if(left < right) {
            int position = partition(arr, left, right);
            quickSort(arr, left, position - 1);
            quickSort(arr, position + 1, right);
        }
        return arr;
    }

    public static int partition(int[] arr, int left, int right) {
        int pivot = arr[right];
        int low = left - 1;
        for(int i = left; i < right; i++) {
            if(arr[i] < pivot) {
                low++;
                swap(arr, i, low);
            }
        }

        swap(arr, right, low + 1);
        return low + 1;
    }

    public static void swap(int[] arr, int i, int low) {
        int temp;
        temp = arr[i];
        arr[i] = arr[low];
        arr[low] = temp;
    }


}
