/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import java.util.*;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
//        System.out.println(new App().getGreeting());


//        BinarySearchTree<Integer> test = new BinarySearchTree<>(5);
//        test.root.leftChild = new Node<>(3);
//        test.root.rightChild = new Node<>(6);
//        test.root.leftChild.leftChild = new Node<>(2);
//        test.root.leftChild.rightChild = new Node<>(4);


//        test.add(1);
//
//
//
//        System.out.println(test.contains(3,test.root));

//        System.out.println(test.maximum());
//        System.out.println(breadthFirst(test));


        BinaryTree<Integer> tree1 = new BinaryTree<>(150);
        tree1.root.rightChild = new Node<>(250);
        tree1.root.leftChild = new Node<>(100) ;
        tree1.root.rightChild.rightChild = new Node<>(350);
        tree1.root.rightChild.rightChild.rightChild =new Node<>(500) ;
        tree1.root.rightChild.rightChild.leftChild =new Node<>(300) ;
        tree1.root.rightChild.leftChild =new Node<>(200) ;
        tree1.root.leftChild.leftChild =new Node<>(75) ;
        tree1.root.leftChild.rightChild =new Node<>(160) ;
        tree1.root.leftChild.rightChild.leftChild =new Node<>(125) ;
        tree1.root.leftChild.rightChild.rightChild =new Node<>(175) ;




        BinaryTree<Integer> tree2 = new BinaryTree<>(42);
        tree2.root.rightChild =new Node<>(600) ;
        tree2.root.leftChild =new Node<>(100) ;
        tree2.root.rightChild.rightChild =new Node<>(350) ;
        tree2.root.rightChild.rightChild.rightChild =new Node<>(500) ;
        tree2.root.rightChild.rightChild.leftChild =new Node<>(4) ;
        tree2.root.rightChild.leftChild =new Node<>(200) ;
        tree2.root.leftChild.leftChild = new Node<>(15);
        tree2.root.leftChild.rightChild = new Node<>(160);
        tree2.root.leftChild.rightChild.leftChild = new Node<>(125);
        tree2.root.leftChild.rightChild.rightChild =new Node<>(175) ;


        System.out.println(treeIntersection(tree1, tree2).toString());






//        KaryTree<Integer> test = new KaryTree<>(3);
//        test.add(3);
//        test.add(4);
//        test.add(6);
//
//
//        System.out.println(fizzBuzzTree(test).root.value);

    }


    public static ArrayList treeIntersection(BinaryTree tree1 , BinaryTree tree2){
        if (tree1.root == null || tree2.root == null){
            return null;
        }
        ArrayList tree1List = tree1.preOrder(tree1.root);
        ArrayList tree2List = tree2.preOrder(tree2.root);
        ArrayList intersection = new ArrayList();

        for (int i = 0; i < tree1List.size(); i++) {
            if( (int)tree1List.get(i) == (int)tree2List.get(i)){
                intersection.add(tree1List.get(i));
            }
        }
        return intersection;
    }



    public static ArrayList<Integer> breadthFirst(BinaryTree<Integer> tree) {
        ArrayList<Integer> values =new ArrayList<Integer>();
        Queue<Node> test = new LinkedList<>();
        if (tree.root != null) {
            test.add(tree.root);
            while (!test.isEmpty()) {
                Node node = test.remove();
                values.add((Integer)node.value);
                if (node.leftChild != null) {
                    test.add(node.leftChild);
                }
                if (node.rightChild != null) {
                    test.add(node.rightChild);
                }
            }
        }
        return values;
    }



    public static KaryTree<String> fizzBuzzTree(KaryTree<Integer> tree){
        KaryTree<String> newTree = new KaryTree<>(tree.K);
        Queue<Knode<Integer>> newQueue = new LinkedList<>();
        if(tree.root != null){
            newQueue.add(tree.root);
            while(!newQueue.isEmpty()){
                Knode<Integer> current = newQueue.poll();
                String currentValue;
                if(current.value % 3 == 0 && current.value % 5 == 0)
                    currentValue = "FizzBuzz";
                else if((int)current.value % 3 == 0){
                    currentValue="Fizz";
                }
                else if((int)current.value % 5 == 0){
                    currentValue="Buzz";
                }
                else{
                    currentValue=current.value.toString();
                }
                newTree.add(currentValue);
                if(! current.allChildren.isEmpty()){
                    newQueue.addAll(current.allChildren);
                }
            }
        }
        return newTree;
    }
}
