/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");




//        Node can be successfully added to the graph
        Graph<String> testGraph = new Graph<>();
        Node<String> newNode = testGraph.addNode("A");

        assertTrue(testGraph.graph.containsKey(newNode));



//        An edge can be successfully added to the graph
        Node<String> secondNode = testGraph.addNode("B");
        testGraph.addEdge(newNode,secondNode,true);

        assertEquals(secondNode , testGraph.getNeighbors(newNode).get(0));




//        A collection of all nodes can be properly retrieved from the graph
        Set<Node<String>> result = new HashSet<>();
        result.add(newNode);
        result.add(secondNode);

        assertEquals(result, testGraph.getNodes());




//        All appropriate neighbors can be retrieved from the graph
        List<Node<String>> result2 = new ArrayList<>();
        result2.add(secondNode);

        assertEquals(result2 , testGraph.getNeighbors(newNode));




//        Neighbors are returned with the weight between nodes included
        Node<String> weightNode = testGraph.addNode("C");
        testGraph.addEdge(secondNode,weightNode,5,true);


        assertEquals(5 , testGraph.getNeighbors(weightNode).get(0).weight);
        assertEquals(5 , testGraph.getNeighbors(secondNode).get(1).weight);



//        The proper size is returned, representing the number of nodes in the graph
        assertEquals(3,testGraph.getSize());



//        A graph with only one node and edge can be properly returned
        Graph<String> newGraph = new Graph<>();
        Node<String> oneNode = newGraph.addNode("A");

        Set<Node<String>> result5 = new HashSet<>();
        result5.add(oneNode);


        assertEquals(result5, newGraph.getNodes());



//        An empty graph properly returns null
        Graph<String> emptyGraph = new Graph<>();

        assertNull(emptyGraph.getNodes());

    }
}
